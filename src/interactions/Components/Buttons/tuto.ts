import { ButtonInteraction, ButtonStyle, ComponentType, InteractionButtonComponentData, ModalSubmitInteraction } from "discord.js";

/**
 * Les interactions pr√©sentes dans le dossier "Components" sont automatiquement
 * import√©es (les sous-dossiers ne sont l√† que pour le rangement)
 *
 * Un composant a plusieurs propri√©t√©s qui sont d√©clar√©es par discord.js et le fichier customComponents.d.ts
 *
 * Un composant doit √™tre export√©e par d√©faut et contenir un certain nombre de propri√©t√©s
 *
 * Un composant doit absolument envoyer une r√©ponse √† l'interaction de l'utilisateur,
 * On r√©alise cela en utiliser le param√®tre "interaction"
 * On peut utiliser
 * 									- "interaction.reply" pour envoyer une r√©ponse imm√©diate
 * 									- "interaction.update" pour modifier le message o√π est attach√© le bouton
 * 									- "interaction.deferReply" pour faire patienter l'utilisateur avant la r√©ponse
 * 									- "interaction.deferUpdate" pour faire patienter l'utilisateur avant la modification du message du bouton
 * 									- "interaction.editReply" pour modifier une r√©ponse (d√©f√©rer une r√©ponse est vu comme une r√©ponse)
 *
 * Une r√©ponse peut √™tre de deux types diff√©rents :
 * 		"ephemeral" (la r√©ponse est visible uniquement par l'utilisateur qui a lanc√© la commande et √©ph√©m√®re)
 * 		 ou normale (la r√©ponse est visible par tout le monde)
 */

export default {
	customId: "test_button",
	regexValidator: /test_button.+/,
	async execute(interaction: ButtonInteraction): Promise<void> {
		interaction.reply("Salut");
	},
	style: ButtonStyle.Primary,
	type: ComponentType.Button,
	disabled: false,
	emoji: "ü§ñ",
	label: "test",
} as InteractionButtonComponentData;
